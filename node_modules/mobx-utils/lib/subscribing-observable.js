"use strict";
var mobx_1 = require("mobx");
var utils_1 = require("./utils");
function subscribingObservable(subscriber, unsubscriber, initialValue, modifier) {
    if (unsubscriber === void 0) { unsubscriber = utils_1.NOOP; }
    if (initialValue === void 0) { initialValue = undefined; }
    if (modifier === void 0) { modifier = utils_1.IDENTITY; }
    var isActive = false;
    var isDisposed = false;
    var value = mobx_1.observable(modifier(initialValue));
    var atom = new mobx_1.Atom("SyncedObservable", function () {
        isActive = true;
        subscriber(mobx_1.action(function (newValue) {
            value.set(newValue);
            atom.reportChanged();
        }));
    }, function () {
        if (isActive)
            unsubscriber();
        isActive = false;
    });
    return {
        get: function () {
            if (isDisposed)
                throw new Error("subscribingObservable has already been disposed");
            var beingTracked = atom.reportObserved();
            if (!beingTracked && !isActive)
                console.warn("Called `get` of an subscribingObservable outside a reaction. Current value will be returned but no new subscription has started");
            return value.get();
        },
        dispose: function () {
            isDisposed = true;
            if (isActive)
                unsubscriber();
        }
    };
}
exports.subscribingObservable = subscribingObservable;
